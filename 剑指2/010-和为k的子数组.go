/*
* @Author: lishuang
* @Date:   2022/3/26 10:25
 */

package main

/*
给定一个整数数组和一个整数k ，请找到该数组中和为k的连续子数组的个数。

示例 1 :

输入:nums = [1,1,1], k = 2
输出: 2
解释: 此题 [1,1] 与 [1,1] 为两种不同的情况

昨天的数组专题，我们针对双指针中的特殊场景----滑动窗口思维进行了学习。

在解题思维中，罗列出了滑动窗口的模板的使用方式，通过：

确定左右边界
查找窗口滑动条件的方式
按照题意套模板
即可可以轻松解决滑窗相关的题目。

滑动窗口的力所不及
在套模板的同时，大家是否考虑过，假设题目同样是求连续的子数组，但是在数组中出现了负数，那这种情况下还可以使用滑动窗口么？

答案是不行的，为什么？

我们窗口滑动的条件是什么，while窗口内元素超过或者不满足条件时移动，但如果数组存在负数，遇到不满足题意的时候，我们应该移动窗口左边界，还是扩大窗口右边界从而寻找到符合条件的情况呢？

当一种场景存在多种可能时，显然就是当前的算法不适配解题。今天就为大家介绍另一种数组中常用的算法----前缀和。

前缀和的解题思想
前缀和的题目解题思维比较固定，即当我们循环数组到下标N时，需要用到数组前N-1项的计算的结果（这里不一定非要是和，也可能是积等），
此时我们就该考虑是否应该通过计算数组循环过程中的累计值的方式简化解题，如此便有了前缀和的解题思想。

了解了思想，下来就该考虑，这个累计的结果我们该通过什么方式保存起来呢？

题目明确要求不允许使用额外空间的，直接原地修改数组
不限制空间复杂度时，最好额外开辟空间计算，避免数据污染
计算时如果每次只需要获取前一次的累计结果，可以通过数组的方式存储每次获取数组末尾元素的值
如果每次计算需要获取前几次或更多次的结果进行对比时，推荐哈希表的方式，这样可以压缩时间复杂度
让我们先来通过一道题目，熟悉下前缀和的思维，并且了解下关于前缀和边界的这个易错点。


这道题目非常简洁，就是求数组中何为整数k的连续子数组个数。
如果这道题的取值没有负数，那就是标准的滑窗问题，但因为有了负数，滑窗思想不能用了。
通过分析，这道题应该属于我们上面列举四种情况的最后一种。具体思路如下：

初始化一个空的哈希表和pre_sum=0的前缀和变量
设置返回值ret = 0，用于记录满足题意的子数组数量
循环数组的过程中，通过原地修改数组的方式，计算数组的累加和
将当前累加和减去整数K的结果，在哈希表中查找是否存在
如果存在该key值，证明以数组某一点为起点到当前位置满足题意，ret加等于将该key值对应的value
判断当前的累加和是否在哈希表中，若存在value+1，若不存在value=1
最终返回ret即可
但在这里要注意刚才说到的前缀和边界问题。
我们在计算这种场景时，需要考虑如果以数组nums[0]为开头的连续子数组就满足题意呢？
此时候我们的哈希表还是空的，没办法计算前缀和！所以遇到这类题目，都需要在哈希表中默认插入一个{0:1}的键值对，
用于解决从数组开头的连续子数组满足题意的特殊场景。
下面就开始解题吧！

思路解析: 前缀和  使用一个哈希表记录 前缀和 sum-k, 因为每次 sum+num 都是变化的，能够确保最后结果是连续。

*/
func subarraySum(nums []int, k int) int {
	var sum, res int
	m := make(map[int]int)
	m[0]++

	for _, n := range nums {
		sum += n
		res += m[sum-k]
		m[sum]++
	}

	return res
}
