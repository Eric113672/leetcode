/*
* @Author: lishuang
* @Date:   2022/3/22 10:58
 */

package main

/*
把n个骰子扔在地上，所有骰子朝上一面的点数之和为s。输入n，打印出s的所有可能的值出现的概率。

你需要用一个浮点数数组返回答案，其中第 i 个元素代表这 n 个骰子所能掷出的点数集合中第 i 小的那个的概率。

输入: 1
输出: [0.16667,0.16667,0.16667,0.16667,0.16667,0.16667]

输入: 2
输出: [0.02778,0.05556,0.08333,0.11111,0.13889,0.16667,0.13889,0.11111,0.08333,0.05556,0.02778]


解题思路
毫不避讳的说，我一开始，连题都没读懂。。强行理解一波，就是要计算出，在有n个🎲的情况下， 每一种可能摇出的数字出现的次数，比如[1,2,3]和[2,2,2]结果都是6，但是他们的数值却各不相同。

如果这么考虑，就有点直接了，因为绝大多数人应该都能想得到转化方程，i代表当前有几个🎲，j代表当前拼成的数字总和是多少，如果现在的总和是j，那么最后一个🎲可能分别摇到1，2，3，4，5，6，所以

dp[i][j]+=for (1~6) dp[i-1][j-k] (k代表了1到6)

因为在转化方程这里不需要太多的绕弯，这可能是唯一能把这道题和简单挂钩的地方吧。。

执行用时 :0 ms, 在所有 Go 提交中击败了100.00%的用户
内存消耗 :2.2 MB, 在所有 Go 提交中击败了100.00%的用户



*/
import (
	"math"
)

func printNumbers(n int) []float64 {
	dp := make([][]int, n+1)
	for i := 0; i <= n; i++ {
		dp[i] = make([]int, 6*n+1)
	}
	for i := 1; i <= 6; i++ {
		dp[1][i] = 1
	}

	for i := 1; i <= n; i++ {
		dp[i][i] = 1
	}

	for i := 2; i <= n; i++ {
		for j := i + 1; j <= 6*i; j++ {
			for k := 1; k <= 6; k++ {
				if j-k >= i-1 {
					dp[i][j] += dp[i-1][j-k]
				}
			}
		}
	}

	result := make([]float64, 6*n)
	for i := n; i <= 6*n; i++ {
		result[i-1] = float64(dp[n][i]) / math.Pow(6, float64(n))
	}
	return result[n-1:]
}
